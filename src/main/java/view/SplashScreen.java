/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.Color;
import java.awt.Font;
import java.awt.GraphicsEnvironment;
import java.io.File;
import java.io.PrintWriter;
import java.io.StringWriter;
import javax.swing.ImageIcon;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import model.bean.ConfigBEAN;
import util.ConfigFileFactory;
import util.ConnectionVerifyer;
import util.InitHelper;

public class SplashScreen extends javax.swing.JFrame {

    private Font nasalization;
    private Color BG, FG, realce, textBG;

    public SplashScreen() {
        initFonts();
        initColors();
        initComponents();
        tfInfo.setFont(nasalization);
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    if (etapaStorage()) {
                        if (etapaBinFile()) {
                            if (etapaNetwork()) {
                                if (etapaGithub()) {
                                    etapaIndexFile();
                                }
                            }
                            if (etapaDatabase()) {
                                changeIcon("database", "success", lbDatabase);
                                verbose("Carregamento Concluido. Iniciando Login Middleware", false);
                            }
                        }
                    }
                } catch (Exception ex) {
                    StringWriter sw = new StringWriter();
                    PrintWriter pw = new PrintWriter(sw);
                    ex.printStackTrace(pw);
                    JOptionPane.showMessageDialog(null, sw.toString());
                }
            }

        }, "Thread Splash").start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnBg = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        lbIndexFile = new javax.swing.JLabel();
        lbNetwork = new javax.swing.JLabel();
        lbGithub = new javax.swing.JLabel();
        lbLocalStorage = new javax.swing.JLabel();
        lbBinFile = new javax.swing.JLabel();
        lbDatabase = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        tfInfo = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);

        pnBg.setBackground(new java.awt.Color(0, 0, 0));

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));

        lbIndexFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/32x/index-file-dark.png"))); // NOI18N

        lbNetwork.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/32x/network-dark.png"))); // NOI18N

        lbGithub.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/32x/github-dark.png"))); // NOI18N

        lbLocalStorage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/32x/local-storage-dark.png"))); // NOI18N

        lbBinFile.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/32x/binary-file-dark.png"))); // NOI18N

        lbDatabase.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/32x/database-dark.png"))); // NOI18N

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbLocalStorage)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbBinFile)
                .addGap(6, 6, 6)
                .addComponent(lbNetwork)
                .addGap(6, 6, 6)
                .addComponent(lbGithub)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbIndexFile)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbDatabase)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lbDatabase)
                    .addComponent(lbBinFile)
                    .addComponent(lbIndexFile)
                    .addComponent(lbLocalStorage)
                    .addComponent(lbGithub)
                    .addComponent(lbNetwork))
                .addContainerGap())
        );

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/XLIVSys.png"))); // NOI18N

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/images/Carregar.gif"))); // NOI18N

        tfInfo.setEditable(false);
        tfInfo.setBackground(new java.awt.Color(0, 0, 0));
        tfInfo.setFont(new java.awt.Font("Segoe UI Semibold", 0, 18)); // NOI18N
        tfInfo.setForeground(new java.awt.Color(70, 70, 255));
        tfInfo.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        tfInfo.setText("Carregando...");
        tfInfo.setBorder(null);

        javax.swing.GroupLayout pnBgLayout = new javax.swing.GroupLayout(pnBg);
        pnBg.setLayout(pnBgLayout);
        pnBgLayout.setHorizontalGroup(
            pnBgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(pnBgLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(tfInfo)
                .addContainerGap())
            .addGroup(pnBgLayout.createSequentialGroup()
                .addGap(154, 154, 154)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnBgLayout.createSequentialGroup()
                .addContainerGap(59, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(51, 51, 51))
        );
        pnBgLayout.setVerticalGroup(
            pnBgLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnBgLayout.createSequentialGroup()
                .addContainerGap(18, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(tfInfo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnBg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnBg, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SplashScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SplashScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SplashScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SplashScreen.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SplashScreen().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel lbBinFile;
    private javax.swing.JLabel lbDatabase;
    private javax.swing.JLabel lbGithub;
    private javax.swing.JLabel lbIndexFile;
    private javax.swing.JLabel lbLocalStorage;
    private javax.swing.JLabel lbNetwork;
    private javax.swing.JPanel pnBg;
    private javax.swing.JTextField tfInfo;
    // End of variables declaration//GEN-END:variables

    private void initColors() {
        ConfigBEAN cb = new ConfigFileFactory().readFile();
        Color[] paleta = cb.getColors();
        if (cb.getOptions()[0]) {
            paleta = ConfigBEAN.DARK_MODE_PALETTE;
        } else {
            paleta = ConfigBEAN.LIGHT_MODE_PALETTE;
        }
        FG = paleta[0];
        BG = paleta[1];
        realce = paleta[2];
        textBG = paleta[3];
    }

    private void initFonts() {
        try {
            nasalization = Font.createFont(Font.TRUETYPE_FONT, new File(getClass().getResource("/fonts/nasalization-rg.ttf").toURI())).deriveFont(14f);
            GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
            ge.registerFont(nasalization);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void changeIcon(String family, String state, JLabel label) {
        ImageIcon ii = new ImageIcon(getClass().getResource("/icons/32x/" + family + "-" + state + ".png"));
        label.setIcon(ii);
    }

    private boolean etapaStorage() throws Exception {
        Thread.sleep(1000);
        changeIcon("local-storage", "running", lbLocalStorage);
        verbose("Verificando Permissões De Escrita", false);
        if (InitHelper.isWritable()) {
            Thread.sleep(200);
            verbose("Permissão De Escrita Liberada", false);
            Thread.sleep(200);
            verbose("Verificando Presença De Pastas", false);
            Thread.sleep(500);
            if (!InitHelper.hasDataFolder()) {
                verbose("Pasta Não Existe. Criando...", false);
                Thread.sleep(200);
                if (InitHelper.createDataFolder()) {
                    verbose("Pasta Criada Com Sucesso.", false);
                    Thread.sleep(500);
                    verbose("Etapa De Storage Finalizada Com Sucesso.", false);
                    changeIcon("local-storage", "success", lbLocalStorage);
                    return true;
                } else {
                    verbose("Falha Ao Criar Pasta", true);
                    Thread.sleep(500);
                    verbose("Etapa De Storage Finalizada Com Errors.", true);
                    changeIcon("local-storage", "error", lbLocalStorage);
                    getToolkit().beep();
                    return false;
                }
            } else {
                verbose("Pasta Encontrada.", false);
                Thread.sleep(200);
                verbose("Etapa De Storage Finalizada Com Sucesso.", false);
                changeIcon("local-storage", "success", lbLocalStorage);
                return true;
            }
        } else {
            verbose("Permissão De Escrita Foi Negada.", true);
            changeIcon("local-storage", "error", lbLocalStorage);
            getToolkit().beep();
            return false;
        }
    }

    private boolean etapaBinFile() throws Exception {
        Thread.sleep(1000);
        changeIcon("binary-file", "running", lbBinFile);
        verbose("Verificando Binário De Configurações", false);
        Thread.sleep(500);
        if (InitHelper.binFileExists()) {
            float f = InitHelper.fileVersionIsTheSame();
            if (f == 0) {
                verbose("Arquivo Binário Está Atualizado", false);
                Thread.sleep(500);
                changeIcon("binary-file", "success", lbBinFile);
                Thread.sleep(500);
                verbose("Etapa De Arquivo Binário Finalizada Com Sucesso.", false);
                return true;
            } else {
                verbose("Arquivo Binário é Diferente. Abortando Inicialização...", true);
                int i = JOptionPane.showConfirmDialog(null, "Deseja Atualizar O Arquivo De Configurações ? Dados Antigos Serão Apagados", "Nova versão disponivel", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                switch (i) {
                    case JOptionPane.YES_OPTION:
                        verbose("Migrando...", false);
                        Thread.sleep(1000);
                        InitHelper.deleteBinFile();
                        new FirstStartConfig().setVisible(true);
                        dispose();
                        break;
                    case JOptionPane.NO_OPTION:
                    default:
                        verbose("Pulando Migração De Arquivo Binário", true);
                        Thread.sleep(500);
                        break;
                }
                Thread.sleep(1000);
                return true;
            }
        } else {
            verbose("Arquivo Binário De Configuração Não Encontrado", true);
            changeIcon("binary-file", "error", lbBinFile);
            getToolkit().beep();
            Thread.sleep(500);
            verbose("Etapa De Arquivo Binário Finalizada Com Errors.", true);
            return false;
        }
    }

    private boolean etapaNetwork() throws Exception {
        Thread.sleep(1000);
        changeIcon("network", "running", lbNetwork);
        verbose("Verificando Conexão A Internet", false);
        if (new ConnectionVerifyer().isConnected()) {
            Thread.sleep(500);
            verbose("Rede Conectada", false);
            changeIcon("network", "success", lbNetwork);
            Thread.sleep(500);
            verbose("Etapa De Rede Finalizada Com Sucesso.", false);
            return true;
        } else {
            Thread.sleep(500);
            verbose("Rede Desconectada", true);
            changeIcon("network", "error", lbNetwork);
            Thread.sleep(500);
            verbose("Etapa De Rede Finalizada Com Sucesso.", true);
            Thread.sleep(1000);
            verbose("Pulando Verificação De Repositório Github", true);
            changeIcon("github", "error", lbGithub);
            verbose("Pulando Verificação De Arquivo De Indice", true);
            changeIcon("index-file", "error", lbIndexFile);
            return false;
        }
    }

    private boolean etapaGithub() throws Exception {
        Thread.sleep(1000);
        changeIcon("github", "running", lbGithub);
        verbose("Verificando Conexão Ao Repositório Git", false);
        if (new ConnectionVerifyer().isRearchble("https://github.com/EduardoFSilva/XLIV")) {
            Thread.sleep(500);
            verbose("Conexão Ao Repositório Bem Sucedida", false);
            changeIcon("github", "success", lbGithub);
            Thread.sleep(500);
            verbose("Etapa De Repositório Github Finalizada Com Sucesso.", false);
            return true;
        } else {
            Thread.sleep(500);
            verbose("Falha Ao Conectar Ao Repositório", true);
            changeIcon("github", "error", lbGithub);
            getToolkit().beep();
            Thread.sleep(500);
            verbose("Etapa De Repositório Github Finalizada Com Erros.", true);
            return false;
        }
    }

    private boolean etapaIndexFile() throws Exception {
        Thread.sleep(1000);
        changeIcon("index-file", "running", lbIndexFile);
        verbose("Verificando Existencia De Arquivo De Indice", false);
        if (new ConnectionVerifyer().isRearchble("https://raw.githubusercontent.com/EduardoFSilva/XLIV/master/files/indice")) {
            Thread.sleep(500);
            verbose("Arquivo De Indice Encontrado", false);
            changeIcon("index-file", "success", lbIndexFile);
            Thread.sleep(500);
            verbose("Etapa De Arquivo De Indice Finalizada Com Sucesso.", false);
            return true;
        } else {
            Thread.sleep(500);
            verbose("Arquivo De Indice Não Encontrado", true);
            changeIcon("index-file", "error", lbIndexFile);
            getToolkit().beep();
            Thread.sleep(500);
            verbose("Etapa De Arquivo De Indice Finalizada Com Erros.", true);
            return false;
        }
    }

    private boolean etapaDatabase() throws Exception {
        Thread.sleep(1000);
        changeIcon("database", "running", lbDatabase);
        if (InitHelper.databaseExists()) {
            if (InitHelper.getDatabaseVersion() < InitHelper.DATABASE_VERSION) {
                verbose("Database Desatualizada", true);
                int i = JOptionPane.showConfirmDialog(null, "Deseja Atualizar A Database ? Dados Antigos Serão Apagados", "Nova versão disponivel", JOptionPane.YES_NO_OPTION, JOptionPane.WARNING_MESSAGE);
                switch (i) {
                    case JOptionPane.YES_OPTION:
                        verbose("Migrando...", false);
                        InitHelper.dropDatabase();
                        try {
                            InitHelper.generateDatabase();
                        } catch (Exception ex) {
                            changeIcon("database", "error", lbDatabase);
                            verbose("Falha Ao Gerar Database", true);
                            return false;
                        }
                        verbose("Migração Concluida.", false);
                        changeIcon("database", "success", lbDatabase);
                        Thread.sleep(500);
                        break;
                    case JOptionPane.NO_OPTION:
                    default:
                        verbose("Pulando Migração De Database", true);
                        changeIcon("database", "success", lbDatabase);
                        Thread.sleep(500);
                        break;
                }
            }
            return true;
        } else {
            verbose("Database Não Encontrada. Criando...", false);
            Thread.sleep(200);
            try {
                InitHelper.generateDatabase();
            } catch (Exception ex) {
                changeIcon("database", "error", lbDatabase);
                verbose("Falha Ao Gerar Database", true);
                return false;
            }
            verbose("Database Criada", false);
            Thread.sleep(500);
            verbose("Etapa De Database Com Sucesso.", false);
            Thread.sleep(500);
            changeIcon("database", "success", lbDatabase);
            return true;
        }
    }

    private void verbose(String msg, boolean isError) {
        Color c1 = new Color(70, 70, 255);
        Color c2 = new Color(255, 70, 70);
        if (isError) {
            System.err.println("[XLIV-ERROR] " + msg);
            tfInfo.setForeground(c2);
            tfInfo.setText(msg);
        } else {
            System.err.println("[XLIV-INFO] " + msg);
            tfInfo.setForeground(c1);
            tfInfo.setText(msg);
        }
    }
}
